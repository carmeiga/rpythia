plot(Yorig,prediction)
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.05)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.05)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.2)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.2)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.2)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.2)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.2)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.2)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.2)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.2)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.2)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.2)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.2)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.2)
}
plot(Yorig~mu)
plot(Yorig,prediction)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.2)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.2)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.6)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.6)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,0.6)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),0.6)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,3)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),3)
}
plot(Yorig~mu)
plot(Yorig,prediction)
plot(p~as.numeric(res$p))
Y[is.na(Y)]=0
mu=res$Ypred
lambda=4
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
W=(diag(dtilde))
alphatilde=coef(Ztilde,Ytilde,W,lambda,mutilde,3)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),3)
}
plot(Yorig~mu)
plot(Yorig,prediction)
W=diag(d)
alphatilde=coef(Z,Y,W,lambda,mu,3)
alphatilde=coef(Z,Y,W,lambda,mu,3)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Ztilde,as.numeric(Z[i,]),as.numeric(alphatilde),3)
}
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,3)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),3)
}
plot(Yorig~mu)
plot(Yorig,prediction)
d
Y[is.na(Y)]=0
mu=res$Ypred
lambda=4
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,25)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),25)
}
plot(Yorig~mu)
plot(Yorig,prediction)
n=200
myCop <- normalCopula(param=c(0.3,0.7,0.8), dim = 3, dispstr = "un")
myMvd <- mvdc(copula=myCop, margins=c("unif", "unif", "unif"),
paramMargins=list(list(min=0,max=10),
list(min=0,max=10),
list(min=0,max=10)) )
Z <- rMvdc(n, myMvd)
eps=rnorm(n,0,1)
Y=2*(Z[,1])+eps
colnames(Z) <- c("x1", "x2", "x3")
pairs.panels(Z)
beta=c(-0.05,0,0)
p=numeric(n) #vector with pi
for(i in 1:n) {
x=Z[i,]
p[i]=inv.logit(sum(x*beta), min = 0, max = 1)
}
M=numeric(n)
for(i in 1:n) {
M[i]=rbinom(1,1,1-p[i])
}
Yorig=Y
Y[!M]=NA
res=incomplete.reg(Z,Y)
plot(p~as.numeric(res$p))
plot(Y[!is.na(Y)],res$Ypred[!is.na(Y)])
Y[is.na(Y)]=0
mu=res$Ypred
lambda=4
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,25)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),25)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,5)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),5)
}
plot(Yorig~mu)
plot(Yorig,prediction)
lambda=1
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,5)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),5)
}
plot(Yorig~mu)
plot(Yorig,prediction)
Y[is.na(Y)]=0
mu=res$Ypred
lambda=0.001
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,5)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),5)
}
plot(Yorig~mu)
plot(Yorig,prediction)
W
Rcpp::sourceCpp('repodir/RKHSmissing/kernel_machine/regression.cpp')
Y[is.na(Y)]=0
mu=res$Ypred
lambda=0.001
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,5)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),5)
}
plot(Yorig~mu)
plot(Yorig,prediction)
Y[is.na(Y)]=0
mu=res$Ypred
lambda=0.001
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,5)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),5)
}
plot(Yorig~mu)
plot(Yorig,prediction)
Y[is.na(Y)]=0
mu=res$Ypred
lambda=0.001
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,5)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),5)
}
plot(Yorig~mu)
plot(Yorig,prediction)
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,10)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),10)
}
plot(Yorig~mu)
plot(Yorig,prediction)
Y[is.na(Y)]=0
mu=res$Ypred
lambda=0.001
d=as.numeric(M/p)
Ytilde=Y[res$p>0.1]
Ztilde=Z[res$p>0.1,]
mutilde=mu[res$p>0.1]
dtilde=d[res$p>0.1]
#d=d/sum(d)
Wtilde=(diag(dtilde))
W=diag(d)
#alphatilde=coef(Ztilde,Ytilde,Wtilde,lambda,mutilde,3)
alphatilde=coef(Z,Y,W,lambda,mu,15)
prediction=numeric(n);
for(i in 1:n) {
prediction[i]=kernel_machine(Z,as.numeric(Z[i,]),as.numeric(alphatilde),15)
}
plot(Yorig~mu)
plot(Yorig,prediction)
M
plot(M~Z[,1])
Rcpp::sourceCpp('particarlos/pythia8303/r/proba.cpp')
Rcpp::sourceCpp('particarlos/pythia8303/r/proba.cpp')
Rcpp::sourceCpp('particarlos/pythia8303/r/proba.cpp')
Rcpp::sourceCpp('particarlos/pythia8303/r/proba.cpp')
Rcpp::sourceCpp('particarlos/pythia8303/r/proba.cpp')
Rcpp::sourceCpp('particarlos/pythia8303/r/proba.cpp')
Rcpp::sourceCpp('particarlos/pythia8303/r/proba.cpp')
Rcpp::sourceCpp('particarlos/pythia8303/r/proba.cpp')
Rcpp::sourceCpp('particarlos/pythia8303/r/proba.cpp')
Rcpp::sourceCpp('particarlos/pythia8303/r/proba.cpp')
install.packages(c('Rcpp','RInside'))
install.packages(c('C50','RSNNS','e1071','xgboost'))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.11")
library(rhdf5)
BiocManager::install()
library(rhdf5)
install.packages("rhdf5")
library(rhdf5)
separadores <- read.table("~/particarlos/pythia8303/r/separadores.dat", quote="\"", comment.char="")
View(separadores)
read.table("~/particarlos/pythia8303/r/separadores.dat", quote="\"", comment.char="")
separ=as.vector(read.table("~/particarlos/pythia8303/r/separadores.dat", quote="\"", comment.char=""))
separ
separ=as.numeric(read.table("~/particarlos/pythia8303/r/separadores.dat", quote="\"", comment.char=""))
separ=as.numeric(read.table("~/particarlos/pythia8303/r/separadores.dat", quote="\"", comment.char=""))
separ=as.numeric(read.table("~/particarlos/pythia8303/r/separadores.dat", quote="\"", comment.char="")$V1)
install.packages("tensorflow")
View(separadores)
library(tensorflow)
install_tensorflow()
Y
yes
install.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
install_tensorflow()
library(tensorflow)
tf$constant("Hellow Tensorflow")
library(tensorflow)
tf$constant("Hellow Tensorflow")
library(keras)
library(tensorflow)
library(keras)
remove.packages("tensorflow", lib="~/R/x86_64-pc-linux-gnu-library/4.0")
install.packages("tensorflow")
library(tensorflow)
tf$constant("Hellow Tensorflow")
install_keras()
install.packages("keras")
library(keras)
mnist <- dataset_mnist()
model <- keras_model_sequential() %>%
layer_flatten(input_shape = c(28, 28)) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dropout(0.2) %>%
layer_dense(10, activation = "softmax")
summary(model)
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
model %>%
fit(
x = mnist$train$x, y = mnist$train$y,
epochs = 5,
validation_split = 0.3,
verbose = 2
)
separ=as.numeric(read.table("~/particarlos/pythia8303/r/separadores.dat", quote="\"", comment.char="")$V1)
separ=as.numeric(read.table("~/particarlos/pythia8303/r/separadores.dat", quote="\"", comment.char="")$V1)
separ=as.numeric(read.table("~/particarlos/pythia8303/r/separadores.txt", quote="\"", comment.char="")$V1)
separ=as.numeric(read.table("~/particarlos/pythia8303/rpythia/separadores.txt", quote="\"", comment.char="")$V1)
setwd("~/particarlos/pythia8303/rpythia")
separ=as.numeric(read.table("separadores.txt", quote="\"", comment.char="")$V1)
n=length(separ)
ev=n/2-1
library(readr)
temp <- read_table2("saida.txt", col_names=FALSE,skip =(separ[2+1]+2),n_max=(separ[2+2]-separ[2+1]-5))
temp$ev=rep(1,nrow(temp))
out=temp
for(i in 2:ev) {
temp <- read_table2("saida.txt", col_names=FALSE,skip =(separ[2*i+1]+2),n_max=(separ[2*i+2]-separ[2*i+1]-5))
temp$ev=rep(i-1,nrow(temp))
out=rbind(out,temp)
}
View(temp)
for(i in 1:ev) {
temp <- read_table2("saida.txt", col_names=FALSE,skip =(separ[2*i+1]+2),n_max=(separ[2*i+2]-separ[2*i+1]-5))
temp$ev=rep(i,nrow(temp))
if (i==1)
out=temp
else
out=rbind(out,temp)
}
View(out)
nomes= c('no','id','name','status', 'mother1','mother2','daughter1','daughter2','colour1','colour2','p_x','p_y','p_z','e','m','ev')
colnames(out)=nomes
pt <- as.numeric(read_table2("pt.txt", col_names = FALSE)[1,])
out$pt=pt[-length(pt)]
x <- as.numeric(read_table2("xprod.txt", col_names = FALSE)[1,])
out$x=x[-length(x)]
y <- as.numeric(read_table2("yprod.txt", col_names = FALSE)[1,])
out$y=y[-length(y)]
z <- as.numeric(read_table2("zprod.txt", col_names = FALSE)[1,])
out$z=z[-length(z)]
estables_n=c('e-','e+','mu+','mu-','K+','K-','pi+','pi-','p+','pbar-','n0','nbar0','gamma','K_L0')
# parenteses indican particulas intermediarias (desintegranse)
estables=subset(out, (name %in% estables_n))
unique(estables$name)
library(ggplot2)
ggplot(estables, aes(name)) + geom_bar()
setwd("~/particarlos/pythia8303/rpythia")
separ=as.numeric(read.table("separadores.txt", quote="\"", comment.char="")$V1)
n=length(separ)
ev=n/2-1
library(readr)
temp <- read_table2("saida.txt", col_names=FALSE,skip =(separ[2+1]+2),n_max=(separ[2+2]-separ[2+1]-5))
temp$ev=rep(1,nrow(temp))
out=temp
setwd("~/particarlos/pythia8303/rpythia")
separ=as.numeric(read.table("separadores.txt", quote="\"", comment.char="")$V1)
n=length(separ)
ev=n/2-1
library(readr)
for(i in 1:ev) {
temp <- read_table2("saida.txt", col_names=FALSE,skip =(separ[2*i+1]+2),n_max=(separ[2*i+2]-separ[2*i+1]-5))
temp$ev=rep(i,nrow(temp))
if (i==1)
out=temp
else
out=rbind(out,temp)
}
nomes= c('no','id','name','status', 'mother1','mother2','daughter1','daughter2','colour1','colour2','p_x','p_y','p_z','e','m','ev')
colnames(out)=nomes
View(out)
pt <- as.numeric(read_table2("pt.txt", col_names = FALSE)[1,])
pt
pt[length(pt)]
out$pt=pt[-length(pt)]
View(out)
setwd("~/particarlos/pythia8303/rpythia")
separ=as.numeric(read.table("separadores.txt", quote="\"", comment.char="")$V1)
n=length(separ)
ev=n/2-1
library(readr)
for(i in 1:ev) {
temp <- read_table2("saida.txt", col_names=FALSE,skip =(separ[2*i+1]+2),n_max=(separ[2*i+2]-separ[2*i+1]-5))
temp$ev=rep(i,nrow(temp))
if (i==1)
out=temp
else
out=rbind(out,temp)
}
nomes= c('no','id','name','status', 'mother1','mother2','daughter1','daughter2','colour1','colour2','p_x','p_y','p_z','e','m','ev')
colnames(out)=nomes
pt <- as.numeric(read_table2("pt.txt", col_names = FALSE)[1,])
out$pt=pt[-length(pt)]
x <- as.numeric(read_table2("xprod.txt", col_names = FALSE)[1,])
out$x=x[-length(x)]
y <- as.numeric(read_table2("yprod.txt", col_names = FALSE)[1,])
out$y=y[-length(y)]
z <- as.numeric(read_table2("zprod.txt", col_names = FALSE)[1,])
out$z=z[-length(z)]
estables_n=c('e-','e+','mu+','mu-','K+','K-','pi+','pi-','p+','pbar-','n0','nbar0','gamma','K_L0')
# parenteses indican particulas intermediarias (desintegranse)
estables=subset(out, (name %in% estables_n))
unique(estables$name)
library(ggplot2)
ggplot(estables, aes(name)) + geom_bar()
plot(density(estables$pt))
plot(density(estables$pt[abs(estables$pt)<1]))
plot(density(estables$px[abs(estables$pt)<1]))
View(estables)
plot(density(estables$p_x[abs(estables$pt)<1]))
